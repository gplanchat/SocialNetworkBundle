<?php

/*
 * This file is part of KibokoSocialNetworkBundle.
 *
 * (c) GrÃ©gory Planchat <gregory@kiboko.fr>
 *
 * Thanks to Vincent GUERARD <v.guerard@fulgurio.net> for his work on FulgurioSocialNetworkBundle
 */

namespace Kiboko\Bundle\SocialNetworkBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    const NB_PER_PAGE = 10;

    /**
     * Find all users (without admin) with sortable option, and default order by
     * name.
     *
     * @param object $paginator
     * @param number $page
     * @param string $searchQuery
     */
    public function findOnlySubscribers($paginator, $page = 1, $searchQuery = null)
    {
        if ($searchQuery === null || $searchQuery === '') {
            $search = '';
        } else {
            $search = ' AND (a.email LIKE :searchQuery)';
        }
        $query = $this->getEntityManager()->createQuery('
                SELECT a
                FROM KibokoSocialNetworkBundle:User a
                WHERE a.roles NOT LIKE :role1
                  AND a.roles NOT LIKE :role2
                  AND a.roles NOT LIKE :role3
                ' .$search.'
                ORDER BY a.username'
        );
        $query->setParameter('role1', '%"ROLE_SUPER_ADMIN"%');
        $query->setParameter('role2', '%"ROLE_ADMIN"%');
        $query->setParameter('role3', '%"ROLE_GHOST"%');
        if ($search !== '') {
            $query->setParameter('searchQuery', '%'.$searchQuery.'%');
        }

        return $paginator->paginate($query, $page, self::NB_PER_PAGE);
    }

    /**
     * Find all users (without Ghost) with sortable option, and default order by name.
     *
     * @param object $paginator
     * @param number $page
     * @param string $searchQuery
     */
    public function findWithPagination($paginator, $page = 1, $searchQuery = null)
    {
        if ($searchQuery === null || $searchQuery === '') {
            $search = '';
        } else {
            $search = ' AND (a.email LIKE :searchQuery)';
        }
        $query = $this->getEntityManager()->createQuery('
                SELECT a
                FROM KibokoSocialNetworkBundle:User a
                WHERE a.roles NOT LIKE :role
                ' .$search.'
                ORDER BY a.username
        ');
        $query->setParameter('role', '%"ROLE_GHOST"%');
        if ($search !== '') {
            $query->setParameter('searchQuery', '%'.$searchQuery.'%');
        }

        return $paginator->paginate($query, $page, self::NB_PER_PAGE);
    }

    /**
     * Find enabled user from a part of their username.
     *
     * @param string $username
     * @param array  $excludeIDs
     */
    public function findOnlyInEnabledSubscribers($username, $excludeIDs)
    {
        $query = $this->getEntityManager()->createQuery('
                SELECT a
                FROM KibokoSocialNetworkBundle:User a
                WHERE a.roles NOT LIKE :role1
                    AND a.roles NOT LIKE :role2
                    AND a.roles NOT LIKE :role3
                    AND a.username LIKE :username
                    AND a.id NOT IN (:ids)
                    AND a.enabled=1
                ORDER BY a.username
        ');
        $query->setParameter('role1', '%"ROLE_SUPER_ADMIN"%');
        $query->setParameter('role2', '%"ROLE_ADMIN"%');
        $query->setParameter('role3', '%"ROLE_GHOST"%');
        $query->setParameter('username', $username.'%');
        $query->setParameter('ids', $excludeIDs);

        return $query->getResult();
    }
}
